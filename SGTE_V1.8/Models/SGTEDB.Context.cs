//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SGTE_V1._8.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SGTE2Entities : DbContext
    {
        public SGTE2Entities()
            : base("name=SGTE2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tbl_Aluno> Tbl_Aluno { get; set; }
        public virtual DbSet<Tbl_Cliente> Tbl_Cliente { get; set; }
        public virtual DbSet<Tbl_Endereco> Tbl_Endereco { get; set; }
        public virtual DbSet<Tbl_Escola> Tbl_Escola { get; set; }
        public virtual DbSet<Tbl_Funcionario> Tbl_Funcionario { get; set; }
        public virtual DbSet<Tbl_Hora_Viagem> Tbl_Hora_Viagem { get; set; }
        public virtual DbSet<Tbl_Login> Tbl_Login { get; set; }
        public virtual DbSet<Tbl_Motorista> Tbl_Motorista { get; set; }
        public virtual DbSet<Tbl_Passageiro_Viagem> Tbl_Passageiro_Viagem { get; set; }
        public virtual DbSet<Tbl_Veiculo> Tbl_Veiculo { get; set; }
        public virtual DbSet<Tbl_Viagem> Tbl_Viagem { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<stp_BuscarFuncionario_Result> stp_BuscarFuncionario(string cpf)
        {
            var cpfParameter = cpf != null ?
                new ObjectParameter("cpf", cpf) :
                new ObjectParameter("cpf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_BuscarFuncionario_Result>("stp_BuscarFuncionario", cpfParameter);
        }
    
        public virtual int stp_CadastroAluno(Nullable<int> cliente_ID, string nomeCliente, string nome, string endereço_1, string endereco_2, string rG, string escola, Nullable<int> escolaID, Nullable<int> matricula, string mensagem)
        {
            var cliente_IDParameter = cliente_ID.HasValue ?
                new ObjectParameter("Cliente_ID", cliente_ID) :
                new ObjectParameter("Cliente_ID", typeof(int));
    
            var nomeClienteParameter = nomeCliente != null ?
                new ObjectParameter("NomeCliente", nomeCliente) :
                new ObjectParameter("NomeCliente", typeof(string));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var endereço_1Parameter = endereço_1 != null ?
                new ObjectParameter("Endereço_1", endereço_1) :
                new ObjectParameter("Endereço_1", typeof(string));
    
            var endereco_2Parameter = endereco_2 != null ?
                new ObjectParameter("Endereco_2", endereco_2) :
                new ObjectParameter("Endereco_2", typeof(string));
    
            var rGParameter = rG != null ?
                new ObjectParameter("RG", rG) :
                new ObjectParameter("RG", typeof(string));
    
            var escolaParameter = escola != null ?
                new ObjectParameter("Escola", escola) :
                new ObjectParameter("Escola", typeof(string));
    
            var escolaIDParameter = escolaID.HasValue ?
                new ObjectParameter("EscolaID", escolaID) :
                new ObjectParameter("EscolaID", typeof(int));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var mensagemParameter = mensagem != null ?
                new ObjectParameter("Mensagem", mensagem) :
                new ObjectParameter("Mensagem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CadastroAluno", cliente_IDParameter, nomeClienteParameter, nomeParameter, endereço_1Parameter, endereco_2Parameter, rGParameter, escolaParameter, escolaIDParameter, matriculaParameter, mensagemParameter);
        }
    
        public virtual int stp_CadastroCliente(Nullable<int> iD, string nome, string endereco, string bairro, string cidade, string cEP, string estado, string celular, string telefone, string email, string rG, string cPF, Nullable<System.DateTime> data_Nasc, Nullable<int> matricula, string mensagem)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var enderecoParameter = endereco != null ?
                new ObjectParameter("Endereco", endereco) :
                new ObjectParameter("Endereco", typeof(string));
    
            var bairroParameter = bairro != null ?
                new ObjectParameter("Bairro", bairro) :
                new ObjectParameter("Bairro", typeof(string));
    
            var cidadeParameter = cidade != null ?
                new ObjectParameter("Cidade", cidade) :
                new ObjectParameter("Cidade", typeof(string));
    
            var cEPParameter = cEP != null ?
                new ObjectParameter("CEP", cEP) :
                new ObjectParameter("CEP", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var telefoneParameter = telefone != null ?
                new ObjectParameter("Telefone", telefone) :
                new ObjectParameter("Telefone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var rGParameter = rG != null ?
                new ObjectParameter("RG", rG) :
                new ObjectParameter("RG", typeof(string));
    
            var cPFParameter = cPF != null ?
                new ObjectParameter("CPF", cPF) :
                new ObjectParameter("CPF", typeof(string));
    
            var data_NascParameter = data_Nasc.HasValue ?
                new ObjectParameter("Data_Nasc", data_Nasc) :
                new ObjectParameter("Data_Nasc", typeof(System.DateTime));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var mensagemParameter = mensagem != null ?
                new ObjectParameter("Mensagem", mensagem) :
                new ObjectParameter("Mensagem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CadastroCliente", iDParameter, nomeParameter, enderecoParameter, bairroParameter, cidadeParameter, cEPParameter, estadoParameter, celularParameter, telefoneParameter, emailParameter, rGParameter, cPFParameter, data_NascParameter, matriculaParameter, mensagemParameter);
        }
    
        public virtual int stp_CadastroFuncionario(Nullable<int> iD, string funcao, Nullable<int> matricula, string nome, string endereco, string bairro, string cidade, string cEP, string estado, string tel_Residencial, string tel_Celular, string email, string rG, string cPF, Nullable<System.DateTime> data_Nasc, string sexo, Nullable<int> nivelAcesso, Nullable<int> nivel, string mensagem)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var funcaoParameter = funcao != null ?
                new ObjectParameter("Funcao", funcao) :
                new ObjectParameter("Funcao", typeof(string));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            var nomeParameter = nome != null ?
                new ObjectParameter("Nome", nome) :
                new ObjectParameter("Nome", typeof(string));
    
            var enderecoParameter = endereco != null ?
                new ObjectParameter("Endereco", endereco) :
                new ObjectParameter("Endereco", typeof(string));
    
            var bairroParameter = bairro != null ?
                new ObjectParameter("Bairro", bairro) :
                new ObjectParameter("Bairro", typeof(string));
    
            var cidadeParameter = cidade != null ?
                new ObjectParameter("Cidade", cidade) :
                new ObjectParameter("Cidade", typeof(string));
    
            var cEPParameter = cEP != null ?
                new ObjectParameter("CEP", cEP) :
                new ObjectParameter("CEP", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var tel_ResidencialParameter = tel_Residencial != null ?
                new ObjectParameter("Tel_Residencial", tel_Residencial) :
                new ObjectParameter("Tel_Residencial", typeof(string));
    
            var tel_CelularParameter = tel_Celular != null ?
                new ObjectParameter("Tel_Celular", tel_Celular) :
                new ObjectParameter("Tel_Celular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var rGParameter = rG != null ?
                new ObjectParameter("RG", rG) :
                new ObjectParameter("RG", typeof(string));
    
            var cPFParameter = cPF != null ?
                new ObjectParameter("CPF", cPF) :
                new ObjectParameter("CPF", typeof(string));
    
            var data_NascParameter = data_Nasc.HasValue ?
                new ObjectParameter("Data_Nasc", data_Nasc) :
                new ObjectParameter("Data_Nasc", typeof(System.DateTime));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            var nivelParameter = nivel.HasValue ?
                new ObjectParameter("Nivel", nivel) :
                new ObjectParameter("Nivel", typeof(int));
    
            var mensagemParameter = mensagem != null ?
                new ObjectParameter("Mensagem", mensagem) :
                new ObjectParameter("Mensagem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_CadastroFuncionario", iDParameter, funcaoParameter, matriculaParameter, nomeParameter, enderecoParameter, bairroParameter, cidadeParameter, cEPParameter, estadoParameter, tel_ResidencialParameter, tel_CelularParameter, emailParameter, rGParameter, cPFParameter, data_NascParameter, sexoParameter, nivelAcessoParameter, nivelParameter, mensagemParameter);
        }
    
        public virtual int stp_DesativarFuncionario(string cpf)
        {
            var cpfParameter = cpf != null ?
                new ObjectParameter("cpf", cpf) :
                new ObjectParameter("cpf", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("stp_DesativarFuncionario", cpfParameter);
        }
    
        public virtual ObjectResult<string> stp_IncluirAlunoVeiculo(Nullable<int> aluno_ID, string nomeAluno, string placa, Nullable<int> veiculo_ID, Nullable<int> nivelAcesso, Nullable<int> matricula)
        {
            var aluno_IDParameter = aluno_ID.HasValue ?
                new ObjectParameter("Aluno_ID", aluno_ID) :
                new ObjectParameter("Aluno_ID", typeof(int));
    
            var nomeAlunoParameter = nomeAluno != null ?
                new ObjectParameter("NomeAluno", nomeAluno) :
                new ObjectParameter("NomeAluno", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var veiculo_IDParameter = veiculo_ID.HasValue ?
                new ObjectParameter("Veiculo_ID", veiculo_ID) :
                new ObjectParameter("Veiculo_ID", typeof(int));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("stp_IncluirAlunoVeiculo", aluno_IDParameter, nomeAlunoParameter, placaParameter, veiculo_IDParameter, nivelAcessoParameter, matriculaParameter);
        }
    
        public virtual ObjectResult<stp_ListarAluno_Result> stp_ListarAluno()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_ListarAluno_Result>("stp_ListarAluno");
        }
    
        public virtual ObjectResult<stp_ListarCliente_Result> stp_ListarCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_ListarCliente_Result>("stp_ListarCliente");
        }
    
        public virtual ObjectResult<stp_ListarFuncionario_Result> stp_ListarFuncionario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_ListarFuncionario_Result>("stp_ListarFuncionario");
        }
    
        public virtual ObjectResult<string> stp_MudarAlunoVeiculo(Nullable<int> aluno_ID, string nomeAluno, string placaNova, Nullable<int> veiculo_ID_Atual, Nullable<int> veiculo_ID_Novo, Nullable<int> nivelAcesso, Nullable<int> matricula)
        {
            var aluno_IDParameter = aluno_ID.HasValue ?
                new ObjectParameter("Aluno_ID", aluno_ID) :
                new ObjectParameter("Aluno_ID", typeof(int));
    
            var nomeAlunoParameter = nomeAluno != null ?
                new ObjectParameter("NomeAluno", nomeAluno) :
                new ObjectParameter("NomeAluno", typeof(string));
    
            var placaNovaParameter = placaNova != null ?
                new ObjectParameter("PlacaNova", placaNova) :
                new ObjectParameter("PlacaNova", typeof(string));
    
            var veiculo_ID_AtualParameter = veiculo_ID_Atual.HasValue ?
                new ObjectParameter("Veiculo_ID_Atual", veiculo_ID_Atual) :
                new ObjectParameter("Veiculo_ID_Atual", typeof(int));
    
            var veiculo_ID_NovoParameter = veiculo_ID_Novo.HasValue ?
                new ObjectParameter("Veiculo_ID_Novo", veiculo_ID_Novo) :
                new ObjectParameter("Veiculo_ID_Novo", typeof(int));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            var matriculaParameter = matricula.HasValue ?
                new ObjectParameter("Matricula", matricula) :
                new ObjectParameter("Matricula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("stp_MudarAlunoVeiculo", aluno_IDParameter, nomeAlunoParameter, placaNovaParameter, veiculo_ID_AtualParameter, veiculo_ID_NovoParameter, nivelAcessoParameter, matriculaParameter);
        }
    
        public virtual ObjectResult<stp_RelatorioAlunoVeiculo_Result> stp_RelatorioAlunoVeiculo(Nullable<int> aluno_ID, string nomeAluno, string placa, Nullable<int> veiculo_ID, Nullable<int> nivelAcesso)
        {
            var aluno_IDParameter = aluno_ID.HasValue ?
                new ObjectParameter("Aluno_ID", aluno_ID) :
                new ObjectParameter("Aluno_ID", typeof(int));
    
            var nomeAlunoParameter = nomeAluno != null ?
                new ObjectParameter("NomeAluno", nomeAluno) :
                new ObjectParameter("NomeAluno", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var veiculo_IDParameter = veiculo_ID.HasValue ?
                new ObjectParameter("Veiculo_ID", veiculo_ID) :
                new ObjectParameter("Veiculo_ID", typeof(int));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_RelatorioAlunoVeiculo_Result>("stp_RelatorioAlunoVeiculo", aluno_IDParameter, nomeAlunoParameter, placaParameter, veiculo_IDParameter, nivelAcessoParameter);
        }
    
        public virtual ObjectResult<stp_SelecionaAluno_Result> stp_SelecionaAluno(Nullable<int> iD, Nullable<int> nivelAcesso, string mensagem)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            var mensagemParameter = mensagem != null ?
                new ObjectParameter("Mensagem", mensagem) :
                new ObjectParameter("Mensagem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_SelecionaAluno_Result>("stp_SelecionaAluno", iDParameter, nivelAcessoParameter, mensagemParameter);
        }
    
        public virtual ObjectResult<stp_SelecionaViagem_Result> stp_SelecionaViagem(string nome, Nullable<System.DateTime> data, Nullable<System.DateTime> data2, Nullable<int> iD)
        {
            var nomeParameter = nome != null ?
                new ObjectParameter("nome", nome) :
                new ObjectParameter("nome", typeof(string));
    
            var dataParameter = data.HasValue ?
                new ObjectParameter("data", data) :
                new ObjectParameter("data", typeof(System.DateTime));
    
            var data2Parameter = data2.HasValue ?
                new ObjectParameter("data2", data2) :
                new ObjectParameter("data2", typeof(System.DateTime));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_SelecionaViagem_Result>("stp_SelecionaViagem", nomeParameter, dataParameter, data2Parameter, iDParameter);
        }
    
        public virtual ObjectResult<string> stp_ValidaUsuario(string login, string senha, string mensagem)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var senhaParameter = senha != null ?
                new ObjectParameter("Senha", senha) :
                new ObjectParameter("Senha", typeof(string));
    
            var mensagemParameter = mensagem != null ?
                new ObjectParameter("Mensagem", mensagem) :
                new ObjectParameter("Mensagem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("stp_ValidaUsuario", loginParameter, senhaParameter, mensagemParameter);
        }
    
        public virtual int ListarAlunoVeiculo(Nullable<int> aluno_ID, string nomeAluno, string placa, Nullable<int> veiculo_ID, Nullable<int> nivelAcesso)
        {
            var aluno_IDParameter = aluno_ID.HasValue ?
                new ObjectParameter("Aluno_ID", aluno_ID) :
                new ObjectParameter("Aluno_ID", typeof(int));
    
            var nomeAlunoParameter = nomeAluno != null ?
                new ObjectParameter("NomeAluno", nomeAluno) :
                new ObjectParameter("NomeAluno", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var veiculo_IDParameter = veiculo_ID.HasValue ?
                new ObjectParameter("Veiculo_ID", veiculo_ID) :
                new ObjectParameter("Veiculo_ID", typeof(int));
    
            var nivelAcessoParameter = nivelAcesso.HasValue ?
                new ObjectParameter("NivelAcesso", nivelAcesso) :
                new ObjectParameter("NivelAcesso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ListarAlunoVeiculo", aluno_IDParameter, nomeAlunoParameter, placaParameter, veiculo_IDParameter, nivelAcessoParameter);
        }
    
        public virtual int ListarAlunos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ListarAlunos");
        }
    
        public virtual ObjectResult<stp_RelacaoAlunoVeiculo_Result> stp_RelacaoAlunoVeiculo(Nullable<int> veiculo_ID)
        {
            var veiculo_IDParameter = veiculo_ID.HasValue ?
                new ObjectParameter("Veiculo_ID", veiculo_ID) :
                new ObjectParameter("Veiculo_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<stp_RelacaoAlunoVeiculo_Result>("stp_RelacaoAlunoVeiculo", veiculo_IDParameter);
        }
    
        public virtual int RelacaoAlunoVeiculo(Nullable<int> veiculo_ID)
        {
            var veiculo_IDParameter = veiculo_ID.HasValue ?
                new ObjectParameter("Veiculo_ID", veiculo_ID) :
                new ObjectParameter("Veiculo_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RelacaoAlunoVeiculo", veiculo_IDParameter);
        }
    }
}
